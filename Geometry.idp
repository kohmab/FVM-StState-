//// Calculete grid parameters

int NT = Th.nt;

int[int, int] Neighbours(NT, 3); // indices of the neighbour elements

for (int t = 0; t < NT; t++)        // for each triangle
  for (int e = 0, ee; e < 3; e++) { // for each edge
    Neighbours(t, e) =
        (Th[t].adj((ee = e)) != Th[t]) ? Th[t].adj((ee = e)) : -1;
  }

real[int, int] NormalsR(NT, 3),
    NormalsZ(NT, 3);            // x- and y- components of
                                // the normals to the element surfaces
for (int t = 0; t < NT; t++)    // for each triangle
  for (int v = 0; v < 3; v++) { // for each vertex
    int vnext = (v + 1) % 3,    // index of the next vertex
        e = (v + 2) % 3;        // index of the edge connecting
                                // Vth and VNEXTth vertices
    NormalsR(t, e) = -(Th[t][v].y - Th[t][vnext].y);
    NormalsZ(t, e) = +(Th[t][v].x - Th[t][vnext].x);
    real norm = sqrt(NormalsR(t, e) ^ 2 + NormalsZ(t, e) ^ 2);
    NormalsR(t, e) /= norm;
    NormalsZ(t, e) /= norm;
  }

real[int] Volumes(NT);          // Volumes of the elements ("triangle donuts")
                                // and
real[int, int] Surfaces(NT, 3); // their Surface areas
                                // both divided by 2*pi
real[int] Areas(NT);            // Areas of the triangles

for (int t = 0; t < NT; t++) {
  real Volume = 0, // volume of the current element

      // coordinates of the rectangle circumscribing the element:
      minx = 1e16, miny = 1e16, maxx = -1e16, maxy = -1e16;

  for (int v = 0; v < 3; v++) {
    minx = (minx < Th[t][v].x) ? minx : Th[t][v].x;
    miny = (miny < Th[t][v].y) ? miny : Th[t][v].y;
    maxx = (maxx > Th[t][v].x) ? maxx : Th[t][v].x;
    maxy = (maxy > Th[t][v].y) ? maxy : Th[t][v].y;

    int vnext = (v + 1) % 3, e = (v + 2) % 3;

    // coordinates of the Vth and VNEXTth vertices (x1 < x2, y1 < y2):
    real x1 = min(Th[t][v].x, Th[t][vnext].x),
         x2 = max(Th[t][v].x, Th[t][vnext].x),
         y1 = min(Th[t][v].y, Th[t][vnext].y),
         y2 = max(Th[t][v].y, Th[t][vnext].y);

    Volume -= (NormalsR(t, e) > 0)
                  ? (y2 - y1) * (2 * x2 ^ 2 - x1 * x2 - x1 ^ 2) / 6
                  : (y2 - y1) * (x2 ^ 2 + x1 * x2 - 2 * x1 ^ 2) / 6;
    Surfaces(t, e) = sqrt((x2 - x1) ^ 2 + (y2 - y1) ^ 2) * (x1 + x2) / 2;
  }
  Volume += (maxy - miny) * (maxx ^ 2 - minx ^ 2) / 2;

  Volumes[t] = Volume;

  for (int e = 0; e < 3; e++)
    Surfaces(t, e) /= Volume;

  Areas[t] = Th[t].area / Volume;
}

